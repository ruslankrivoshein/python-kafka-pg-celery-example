version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: monitor_zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - monitor_zookeeper:/var/lib/zookeeper/data/

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: monitor_kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_JMX_PORT=9101
      - KAFKA_JMX_HOSTNAME=kafka
    volumes:
      - monitor_kafka:/var/lib/kafka/data/

  postgres:
    image: postgres:latest
    container_name: monitor_postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=monitoring
    volumes:
      - monitor_postgres:/var/lib/postgresql/data/

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: monitor_pgadmin
    restart: always
    ports:
      - "15432:80"
    env_file: .env
    volumes:
      - monitor_pgadmin:/var/lib/pgadmin/

  redis:
    image: redis:latest
    container_name: monitor_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - type: bind
        source: ./conf.d/redis/redis.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true
      - monitor_redis:/data/
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf

  redis-commander:
    container_name: monitor_redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    ports:
      - "8081:8081"

  portainer:
    image: portainer/portainer:latest
    container_name: monitor_portainer
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - monitor_portainer:/data/

  flower:
    image: mher/flower
    container_name: monitor_flower
    restart: always
    ports:
      - "8888:8888"
    env_file: .env
    command: ["celery", "flower", "--port=8888"]

  celery:
    build: .
    image: monitor_app
    container_name: monitor_celery
    restart: always
    env_file: .env
    volumes:
      - ./src/:/usr/src/app/
      - ./conf.d/kafka_ssl/:/usr/src/conf.d/kafka_ssl/
    command: ["celery", "worker", "-c", "1"]

  celerybeat:
    image: monitor_app
    container_name: monitor_celerybeat
    restart: always
    env_file: .env
    volumes:
      - ./src/:/usr/src/app/
      - ./conf.d/kafka_ssl/:/usr/src/conf.d/kafka_ssl/
    command: ["celery", "-A", "tasks", "beat"]
    depends_on:
      - celery

  transporter:
    image: monitor_app
    container_name: monitor_transporter
    restart: always
    env_file: .env
    volumes:
      - ./src/:/usr/src/app/
      - ./conf.d/kafka_ssl/:/usr/src/conf.d/kafka_ssl/
    command: ["python", "data_transfer.py"]

volumes:
  monitor_kafka:
    external: true
  monitor_zookeeper:
    external: true
  monitor_postgres:
    external: true
  monitor_pgadmin:
    external: true
  monitor_redis:
    external: true
  monitor_portainer:
    external: true
